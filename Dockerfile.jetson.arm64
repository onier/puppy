#export DOCKER_BUILDKIT=0
# Each instruction in this file generates a new layer that gets pushed to your local image cache
#

#
# Lines preceeded by # are regarded as comments and ignored
#

#
# The line below states we will base our new image on the Latest Official Ubuntu
FROM nvcr.io/nvidia/l4t-base:r32.7.1

#
LABEL maintainer="282052309@qq.com"
LABEL version="0.1"
LABEL description="This is custom Docker Image for puppy."

RUN  echo 'deb http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse'  > /etc/apt/sources.list
        RUN  echo 'deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-updates main restricted universe multiverse' >> /etc/apt/sources.list
        RUN  echo 'deb http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse' >> /etc/apt/sources.list
        RUN  echo 'deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-security main restricted universe multiverse' >> /etc/apt/sources.list
        RUN  echo 'deb http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse' >> /etc/apt/sources.list
        RUN  echo 'deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic-backports main restricted universe multiverse' >> /etc/apt/sources.list
        RUN  echo 'deb http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main universe restricted' >> /etc/apt/sources.list
        RUN  echo 'deb-src http://mirrors.ustc.edu.cn/ubuntu-ports/ bionic main universe restricted' >> /etc/apt/sources.list

# Update the image to the latest packages
        RUN apt-get update && apt-get upgrade -y && \
    apt install qt5-default qttools5-dev-tools libqt5x11extras5-dev libqt5sql5* libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavresample-dev \
    libdc1394-22-dev liblapack-dev libxmu-dev libxi-dev git gcc g++ liblzma-dev libxml2-dev libxt-dev wget make pkg-config build-essential libeigen3-dev software-properties-common libssl-dev lsb-release gdb -y

RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 6AF7F09730B3F0A4
RUN apt-add-repository "deb https://apt.kitware.com/ubuntu/ $(lsb_release -cs) main"
RUN apt update -y
RUN apt install cmake -y
RUN apt install gdb -y
RUN apt install autoconf libtool libgl1-mesa-dev libglu1-mesa-dev libglu1-mesa-dev freeglut3-dev -y
RUN  rm -rf /puppy && git clone https://gitee.com/qq2820/puppy -b arm64 && cd /puppy &&  git clone https://gitee.com/qq2820/Fake && mkdir /puppy/cmake-build-debug
RUN cd /puppy/cmake-build-debug && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target rttr rapidjson boost xerces-c  glog -- -j 4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target folly -- -j 4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target opencv -- -j 4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target assimp azmq bullet bullet  -- -j4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target  mimalloc mstch  -- -j 4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target  pcl -- -j1 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug
RUN cd /puppy/cmake-build-debug && cmake --build /puppy/cmake-build-debug --target  protobuf -- -j4 && rm /oss -rf && cd /puppy/cmake-build-debug && rm * -rf && cmake .. -DCMAKE_BUILD_TYPE=debug